{"version":3,"sources":["actions/index.js","actionTypes.js","components/AddQuote.js","actions/quotes.js","actions/quote.js","serviceWorker.js","reducers/quotes.js","reducers/index.js","store/store.js","components/QuoteList.js","index.js"],"names":["module","exports","quotes","require","console","log","quote","__webpack_require__","d","__webpack_exports__","LOAD_QUOTE","LOAD_QUOTE_SUCCESS","LOAD_QUOTE_ERROR","LOAD_QUOTES","LOAD_QUOTES_SUCCESS","LOAD_QUOTES_ERROR","path","config","join","__dirname","DB_HOST","process","directories","dirname","AddQuote","props","_this","Object","_Users_pauldorsch_Documents_PaulsCode_Motivation_App_motivation_app_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_4__","this","_Users_pauldorsch_Documents_PaulsCode_Motivation_App_motivation_app_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_6__","_Users_pauldorsch_Documents_PaulsCode_Motivation_App_motivation_app_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7__","call","state","author","category","addQuote","bind","_Users_pauldorsch_Documents_PaulsCode_Motivation_App_motivation_app_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_9__","onFieldChange","name","e","setState","_Users_pauldorsch_Documents_PaulsCode_Motivation_App_motivation_app_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_3__","fetch","concat","method","headers","Content-Type","body","JSON","stringify","authorResponse","categoryResponse","statusCode","_id","quoteResponse","_context","t0","_this2","react__WEBPACK_IMPORTED_MODULE_10___default","a","createElement","Fragment","type","onChange","target","value","placeholder","style","width","onClick","Component","withRouter","connect","data","loading","error","dispatch","bindActionCreators","_Users_pauldorsch_Documents_PaulsCode_Motivation_App_motivation_app_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","actions","loadQuotesSuccess","actionTypes","loadQuotesError","loadQuotesLoading","loadQuotes","_ref","_Users_pauldorsch_Documents_PaulsCode_Motivation_App_motivation_app_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_Users_pauldorsch_Documents_PaulsCode_Motivation_App_motivation_app_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","settings","response","json","wrap","prev","next","mode","sent","ok","abrupt","message","stop","_x","apply","arguments","loadQuoteSuccess","loadQuoteError","loadQuoteLoading","loadQuote","id","url","Boolean","window","location","hostname","match","initialState","selectedQuote","combineReducers","length","undefined","action","objectSpread","createStore","rootReducer","applyMiddleware","thunk","QuoteList","classCallCheck","possibleConstructorReturn","getPrototypeOf","_this$props","_this$props2","react_default","map","index","key","REACT_APP_DB_HOST","ReactDOM","render","es","store","BrowserRouter","Route","exact","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f7ea8ce3.chunk.js","sourcesContent":["// import *  as quotes from \"./quotes\";\nmodule.exports.quotes = require('./quotes');\nconsole.log(module.exports);\n\nmodule.exports.quote = require('./quote');\n\n\n// import *  as quote from \"./quote\";\n// module.exports.quote = quote;","/** Quote types */\nexport const LOAD_QUOTE = 'LOAD_QUOTE';\nexport const LOAD_QUOTE_SUCCESS = 'LOAD_QUOTE_SUCCESS';\nexport const LOAD_QUOTE_ERROR = 'LOAD_QUOTE_ERROR';\n\n/** Quotes types */\nexport const LOAD_QUOTES = 'LOAD_QUOTES';\nexport const LOAD_QUOTES_SUCCESS = 'LOAD_QUOTES_SUCCESS';\nexport const LOAD_QUOTES_ERROR = 'LOAD_QUOTES_ERROR';","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as actions from '../actions';\nconst path = require('path');\n\n\nrequire('dotenv').config({ path: path.join(__dirname, '../.env') });\n\nconst DB_HOST = process.env.DB_HOST;\nvar directories = path.dirname('../');\nconsole.log(directories);\n\nclass AddQuote extends Component {\n\n    constructor(props) {\n    super(props);\n    \n\t\tthis.state = {\n\t\t\tquote: '',\n\t\t\tauthor: '',\n\t\t\tcategory: ''\n\t\t};\n        this.addQuote = this.addQuote.bind(this);\n        this.onFieldChange = this.onFieldChange.bind(this);\n\t  }\n\n    onFieldChange(name, e) {\n      this.setState({ [name]: e });\n    }\n\n    async addQuote() {\n        let { quote, author, category } = this.state;\n\n        try {\n            let authorResponse = await fetch(`${DB_HOST}/api/author`, {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    name: author\n                })\n            });\n\n            let categoryResponse = await fetch(`${DB_HOST}/api/category`, {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    category: category\n                })\n            });\n\n            if ((authorResponse.statusCode === 200 ||\n                authorResponse.statusCode === 400) &&\n                (categoryResponse.statusCode === 200 ||\n                categoryResponse.statusCode === 400)) {\n                let quoteResponse = await fetch(`${DB_HOST}/api/quote`, {\n                    method: 'POST',\n                    headers: {\n                      'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({\n                        category: categoryResponse.body.category._id,\n                        author: authorResponse.body.author._id,\n                        quote: quote\n                    })\n                });\n                console.log(\"Quote added: \", quoteResponse);\n            }\n        } catch (e) {\n            console.log(\"ERROR: \", e);\n        }\n        \n    }\n\n    render() {\n        return (\n        <>\n          Category:\n          <input\n            type=\"text\"\n            onChange={e => this.onFieldChange('category',  e.target.value)}\n            placeholder=\"Category\"\n            style={{ width: \"200px\" }}\n          />\n          <br />\n          Quote: \n          <input\n            type=\"text\"\n            onChange={e => this.onFieldChange('quote',  e.target.value)}\n            placeholder=\"Quote\"\n            style={{ width: \"200px\" }}\n          />\n          <br />\n          Author:\n          <input\n            type=\"text\"\n            onChange={e => this.onFieldChange('author',  e.target.value)}\n            placeholder=\"Author\"\n            style={{ width: \"200px\" }}\n          />\n          <br />\n          <button onClick={this.addQuote}>\n            ADD\n          </button>\n        </>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tquotes: state.quotes.data,\n\t\tloading: state.quotes.loading,\n\t\terror: state.quotes.error,\n\t};\n};\n\nconst mapDispatchToProps = dispatch => {\n\treturn bindActionCreators({ ...actions.quote }, dispatch);\n};\n\nexport default withRouter(\n\tconnect(\n\t\tmapStateToProps,\n\t\tmapDispatchToProps\n\t)(AddQuote)\n);","import * as actionTypes from '../actionTypes';\n\nconst loadQuotesSuccess = quotes => {\n\treturn {\n\t\ttype: actionTypes.LOAD_QUOTES_SUCCESS,\n\t\tquotes,\n\t};\n};\n\nconst loadQuotesError = error => {\n\treturn {\n\t\ttype: actionTypes.LOAD_QUOTES_ERROR,\n\t\terror,\n\t};\n};\n\nconst loadQuotesLoading = () => {\n\treturn {\n\t\ttype: actionTypes.LOAD_QUOTES,\n\t};\n};\nexport function loadQuotes() {\n\treturn async (dispatch) => {\n\t\tdispatch(loadQuotesLoading());\n\t\tlet url = `/api/quote/all`;\n\t\tlet settings = {\n\t\t\tmethod: 'GET',\n\t\t\tmode: 'cors',\n\t\t\theaders: {\n\t\t\t  'Content-Type': 'application/json',\n\t\t\t},\n\t\t  };\n\t\t  try {\n            let response = await fetch(url, settings);\n            let json = await response.json();\n\t\t\n\t\t\tif(!response.ok) {\n\t\t\t  return dispatch(loadQuotesError(json.message));\n\t\t\t}\n\t\t\treturn dispatch(loadQuotesSuccess(json.quotes));\n\t\t  } catch (err) {\n\t\t\treturn dispatch(loadQuotesError(err));\n\t\t  }\t\n\n\t}\n}","import * as actionTypes from '../actionTypes';\n\nconst loadQuoteSuccess = quote => {\n\treturn {\n\t\ttype: actionTypes.LOAD_QUOTE_SUCCESS,\n\t\tquote,\n\t};\n};\n\nconst loadQuoteError = error => {\n\treturn {\n\t\ttype: actionTypes.LOAD_QUOTE_ERROR,\n\t\terror,\n\t};\n};\n\nconst loadQuoteLoading = () => {\n\treturn {\n\t\ttype: actionTypes.LOAD_QUOTE,\n\t};\n};\n\nexport function loadQuote(id) {\n\treturn async (dispatch) => {\n\t\tdispatch(loadQuoteLoading());\n\t\tlet url = `/api/quote/${id}`;\n\t\tlet settings = {\n\t\t\tmethod: 'GET',\n\t\t\tmode: 'cors',\n\t\t\theaders: {\n\t\t\t  'Content-Type': 'application/json',\n\t\t\t},\n\t\t  };\n\t\t  try {\n\t\t\tlet response = await fetch(url, settings).json();\n\t\t\n\t\t\tif(!response.ok) {\n\t\t\t  return dispatch(loadQuoteError(response.message));\n\t\t\t}\n\t\t\n\t\t\treturn dispatch(loadQuoteSuccess(response.quote));\n\t\t  } catch (err) {\n\t\t\treturn dispatch(loadQuoteError(err));\n\t\t  }\t\n\n\t}\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \n    LOAD_QUOTE,\n    LOAD_QUOTE_ERROR,\n    LOAD_QUOTE_SUCCESS,\n    LOAD_QUOTES,\n    LOAD_QUOTES_ERROR,\n    LOAD_QUOTES_SUCCESS } from '../actionTypes';\n\nconst initialState = {\n    selectedQuote: null,\n    quotes: null,\n\tloading: true,\n\terror: null,\n};\n\nexport function quote(state = initialState, action) {\n\tswitch (action.type) {\n\t\tcase LOAD_QUOTE:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: true,\n\t\t\t};\n\n\t\tcase LOAD_QUOTE_SUCCESS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: false,\n\t\t\t\tselectedQuote: action.quote,\n\t\t\t\terror: null,\n\t\t\t};\n\n\t\tcase LOAD_QUOTE_ERROR:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: false,\n\t\t\t\terror: action.error,\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport function quotes(state = initialState, action) {\n\tswitch (action.type) {\n\t\tcase LOAD_QUOTES:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: true,\n\t\t\t};\n\n\t\tcase LOAD_QUOTES_SUCCESS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: false,\n\t\t\t\tdata: action.quotes,\n\t\t\t\terror: null,\n\t\t\t};\n\n\t\tcase LOAD_QUOTES_ERROR:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: false,\n\t\t\t\terror: action.error,\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}","import { combineReducers } from \"redux\";\nimport { quote, quotes } from \"./quotes\";\n\nexport default combineReducers({ quote, quotes });","import { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"../reducers\";\n\nimport thunk from \"redux-thunk\";\n\nexport default createStore(\n    rootReducer,\n    applyMiddleware(thunk));","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport * as actions from '../actions';\nimport AddQuote from './AddQuote';\n\nclass QuoteList extends Component {\n\n    constructor(props) {\n      super(props);\n    }\n\n    componentWillMount() {\n      const { quotes, loadQuotes } = this.props;\n      if (!quotes) {\n        loadQuotes();\n      }\n    }\n\n\n    render() {\n      const { quotes, loading, error } = this.props;\n      if (error) {\n        return (\n          <>\n            <p> {error} </p>\n          </>\n        );\n      }\n      return (\n        <>\n          <ul>\n            {quotes ?\n              quotes.map((quote, index) => <li key={index}> {quote.quote}  </li> )\n              : <p>Loading...</p>\n            }\n          </ul>\n          <br />\n          <div>\n            <AddQuote />\n          </div>\n        </>\n      );\n    }\n}\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tquotes: state.quotes.data,\n\t\tloading: state.quotes.loading,\n\t\terror: state.quotes.error,\n\t};\n};\n\nconst mapDispatchToProps = dispatch => {\n\treturn bindActionCreators({ ...actions.quotes }, dispatch);\n};\n\nexport default withRouter(\n\tconnect(\n\t\tmapStateToProps,\n\t\tmapDispatchToProps\n\t)(QuoteList)\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport QuoteList from './components/QuoteList';\n\nconst REACT_APP_DB_HOST = process.env.REACT_APP_DB_HOST;\nconsole.log(REACT_APP_DB_HOST);\n\nReactDOM.render(\n  <Provider store={store}>\n  <Router>\n    <Route path=\"/\" exact component={QuoteList} />\n  </Router>\n  </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}