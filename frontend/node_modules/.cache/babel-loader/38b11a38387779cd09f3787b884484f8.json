{"ast":null,"code":"import * as actionTypes from '../actionTypes'; // const loadQuotesSuccess = quotes => {\n// \treturn {\n// \t\ttype: actionTypes.LOAD_QUOTES_SUCCESS,\n// \t\tquotes,\n// \t};\n// };\n// const loadQuotesError = error => {\n// \treturn {\n// \t\ttype: actionTypes.LOAD_QUOTES_ERROR,\n// \t\terror,\n// \t};\n// };\n// const loadQuotesLoading = () => {\n// \treturn {\n// \t\ttype: actionTypes.LOAD_QUOTES,\n// \t};\n// };\n\nconsole.log(module.exports);\n\nmodule.exports.loadQuotes = function () {\n  return function (dispatch) {\n    return dispatch(loadQuotesError(\"NAHHHHHH\"));\n  }; // return async (dispatch) => {\n  // \tdispatch(loadQuotesLoading());\n  // \tlet url = `/api/quote/all`;\n  // \tlet settings = {\n  // \t\tmethod: 'GET',\n  // \t\tmode: 'cors',\n  // \t\theaders: {\n  // \t\t  'Content-Type': 'application/json',\n  // \t\t},\n  // \t  };\n  // \t  try {\n  // \t\tlet response = await fetch(url, settings).json();\n  // \t\tif(!response.ok) {\n  // \t\t  return dispatch(loadQuotesError(response.message));\n  // \t\t}\n  // \t\treturn dispatch(loadQuotesSuccess(response.quotes));\n  // \t  } catch (err) {\n  // \t\treturn dispatch(loadQuotesError(err));\n  // \t  }\t\n  // }\n};","map":{"version":3,"sources":["/Users/pauldorsch/Documents/PaulsCode/Motivation App/motivation-app/frontend/src/actions/quotes.js"],"names":["actionTypes","console","log","module","exports","loadQuotes","dispatch","loadQuotesError"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,gBAA7B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEAC,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,OAAnB;;AAEAD,MAAM,CAACC,OAAP,CAAeC,UAAf,GAA4B,YAAM;AAC9B,SAAO,UAACC,QAAD,EAAc;AACjB,WAAOA,QAAQ,CAACC,eAAe,CAAC,UAAD,CAAhB,CAAf;AACH,GAFD,CAD8B,CAIjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA,CA3BD","sourcesContent":["import * as actionTypes from '../actionTypes';\n\n// const loadQuotesSuccess = quotes => {\n// \treturn {\n// \t\ttype: actionTypes.LOAD_QUOTES_SUCCESS,\n// \t\tquotes,\n// \t};\n// };\n\n// const loadQuotesError = error => {\n// \treturn {\n// \t\ttype: actionTypes.LOAD_QUOTES_ERROR,\n// \t\terror,\n// \t};\n// };\n\n// const loadQuotesLoading = () => {\n// \treturn {\n// \t\ttype: actionTypes.LOAD_QUOTES,\n// \t};\n// };\n\nconsole.log(module.exports);\n\nmodule.exports.loadQuotes = () => {\n    return (dispatch) => {\n        return dispatch(loadQuotesError(\"NAHHHHHH\"));\n    }\n\t// return async (dispatch) => {\n\t// \tdispatch(loadQuotesLoading());\n\t// \tlet url = `/api/quote/all`;\n\t// \tlet settings = {\n\t// \t\tmethod: 'GET',\n\t// \t\tmode: 'cors',\n\t// \t\theaders: {\n\t// \t\t  'Content-Type': 'application/json',\n\t// \t\t},\n\t// \t  };\n\t// \t  try {\n\t// \t\tlet response = await fetch(url, settings).json();\n\t\t\n\t// \t\tif(!response.ok) {\n\t// \t\t  return dispatch(loadQuotesError(response.message));\n\t// \t\t}\n\t\t\n\t// \t\treturn dispatch(loadQuotesSuccess(response.quotes));\n\t// \t  } catch (err) {\n\t// \t\treturn dispatch(loadQuotesError(err));\n\t// \t  }\t\n\n\t// }\n}"]},"metadata":{},"sourceType":"module"}