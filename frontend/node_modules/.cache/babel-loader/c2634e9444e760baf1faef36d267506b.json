{"ast":null,"code":"import _regeneratorRuntime from \"/Users/pauldorsch/Documents/PaulsCode/Motivation App/motivation-app/frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/pauldorsch/Documents/PaulsCode/Motivation App/motivation-app/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as actionTypes from '../actionTypes';\n\nvar loadQuotesSuccess = function loadQuotesSuccess(quotes) {\n  return {\n    type: actionTypes.LOAD_QUOTES_SUCCESS,\n    quotes: quotes\n  };\n};\n\nvar loadQuotesError = function loadQuotesError(error) {\n  return {\n    type: actionTypes.LOAD_QUOTES_ERROR,\n    error: error\n  };\n};\n\nvar loadQuotesLoading = function loadQuotesLoading() {\n  return {\n    type: actionTypes.LOAD_QUOTES\n  };\n};\n\nexport function loadQuotes() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var url, settings, response, json;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                dispatch(loadQuotesLoading());\n                url = \"/api/quote/all\";\n                settings = {\n                  method: 'GET',\n                  mode: 'cors',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  }\n                };\n                _context.prev = 3;\n                _context.next = 6;\n                return fetch(url, settings);\n\n              case 6:\n                response = _context.sent;\n                json = response.json();\n\n                if (response.ok) {\n                  _context.next = 10;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", dispatch(loadQuotesError(json.message)));\n\n              case 10:\n                return _context.abrupt(\"return\", dispatch(loadQuotesSuccess(json.quotes)));\n\n              case 13:\n                _context.prev = 13;\n                _context.t0 = _context[\"catch\"](3);\n                return _context.abrupt(\"return\", dispatch(loadQuotesError(_context.t0)));\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3, 13]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}","map":{"version":3,"sources":["/Users/pauldorsch/Documents/PaulsCode/Motivation App/motivation-app/frontend/src/actions/quotes.js"],"names":["actionTypes","loadQuotesSuccess","quotes","type","LOAD_QUOTES_SUCCESS","loadQuotesError","error","LOAD_QUOTES_ERROR","loadQuotesLoading","LOAD_QUOTES","loadQuotes","dispatch","url","settings","method","mode","headers","fetch","response","json","ok","message"],"mappings":";;AAAA,OAAO,KAAKA,WAAZ,MAA6B,gBAA7B;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,MAAM,EAAI;AACnC,SAAO;AACNC,IAAAA,IAAI,EAAEH,WAAW,CAACI,mBADZ;AAENF,IAAAA,MAAM,EAANA;AAFM,GAAP;AAIA,CALD;;AAOA,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAChC,SAAO;AACNH,IAAAA,IAAI,EAAEH,WAAW,CAACO,iBADZ;AAEND,IAAAA,KAAK,EAALA;AAFM,GAAP;AAIA,CALD;;AAOA,IAAME,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC/B,SAAO;AACNL,IAAAA,IAAI,EAAEH,WAAW,CAACS;AADZ,GAAP;AAGA,CAJD;;AAKA,OAAO,SAASC,UAAT,GAAsB;AAC5B;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACNA,gBAAAA,QAAQ,CAACH,iBAAiB,EAAlB,CAAR;AACII,gBAAAA,GAFE;AAGFC,gBAAAA,QAHE,GAGS;AACdC,kBAAAA,MAAM,EAAE,KADM;AAEdC,kBAAAA,IAAI,EAAE,MAFQ;AAGdC,kBAAAA,OAAO,EAAE;AACP,oCAAgB;AADT;AAHK,iBAHT;AAAA;AAAA;AAAA,uBAWyBC,KAAK,CAACL,GAAD,EAAMC,QAAN,CAX9B;;AAAA;AAWQK,gBAAAA,QAXR;AAYQC,gBAAAA,IAZR,GAYeD,QAAQ,CAACC,IAAT,EAZf;;AAAA,oBAcDD,QAAQ,CAACE,EAdR;AAAA;AAAA;AAAA;;AAAA,iDAeIT,QAAQ,CAACN,eAAe,CAACc,IAAI,CAACE,OAAN,CAAhB,CAfZ;;AAAA;AAAA,iDAkBEV,QAAQ,CAACV,iBAAiB,CAACkB,IAAI,CAACjB,MAAN,CAAlB,CAlBV;;AAAA;AAAA;AAAA;AAAA,iDAoBES,QAAQ,CAACN,eAAe,aAAhB,CApBV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBA","sourcesContent":["import * as actionTypes from '../actionTypes';\n\nconst loadQuotesSuccess = quotes => {\n\treturn {\n\t\ttype: actionTypes.LOAD_QUOTES_SUCCESS,\n\t\tquotes,\n\t};\n};\n\nconst loadQuotesError = error => {\n\treturn {\n\t\ttype: actionTypes.LOAD_QUOTES_ERROR,\n\t\terror,\n\t};\n};\n\nconst loadQuotesLoading = () => {\n\treturn {\n\t\ttype: actionTypes.LOAD_QUOTES,\n\t};\n};\nexport function loadQuotes() {\n\treturn async (dispatch) => {\n\t\tdispatch(loadQuotesLoading());\n\t\tlet url = `/api/quote/all`;\n\t\tlet settings = {\n\t\t\tmethod: 'GET',\n\t\t\tmode: 'cors',\n\t\t\theaders: {\n\t\t\t  'Content-Type': 'application/json',\n\t\t\t},\n\t\t  };\n\t\t  try {\n            let response = await fetch(url, settings);\n            let json = response.json();\n\t\t\n\t\t\tif(!response.ok) {\n\t\t\t  return dispatch(loadQuotesError(json.message));\n\t\t\t}\n\t\t\n\t\t\treturn dispatch(loadQuotesSuccess(json.quotes));\n\t\t  } catch (err) {\n\t\t\treturn dispatch(loadQuotesError(err));\n\t\t  }\t\n\n\t}\n}"]},"metadata":{},"sourceType":"module"}