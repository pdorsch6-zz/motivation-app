{"ast":null,"code":"import _regeneratorRuntime from \"/Users/pauldorsch/Documents/PaulsCode/Motivation App/motivation-app/frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/pauldorsch/Documents/PaulsCode/Motivation App/motivation-app/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as actionTypes from '../actionTypes';\n\nvar loadQuoteSuccess = function loadQuoteSuccess(quote) {\n  return {\n    type: actionTypes.LOAD_QUOTE_SUCCESS,\n    quote: quote\n  };\n};\n\nvar loadQuoteError = function loadQuoteError(error) {\n  return {\n    type: actionTypes.LOAD_QUOTE_ERROR,\n    error: error\n  };\n};\n\nvar loadQuoteLoading = function loadQuoteLoading() {\n  return {\n    type: actionTypes.LOAD_QUOTE\n  };\n};\n\nmodule.exports.loadQuote = function (id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var url, settings, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                dispatch(loadQuoteLoading());\n                url = \"/api/quote/\".concat(id);\n                settings = {\n                  method: 'GET',\n                  mode: 'cors',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  }\n                };\n                _context.prev = 3;\n                _context.next = 6;\n                return fetch(url, settings).json();\n\n              case 6:\n                response = _context.sent;\n\n                if (response.ok) {\n                  _context.next = 9;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", dispatch(loadQuoteError(response.message)));\n\n              case 9:\n                return _context.abrupt(\"return\", dispatch(loadQuoteSuccess(response.quote)));\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](3);\n                return _context.abrupt(\"return\", dispatch(loadQuoteError(_context.t0)));\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3, 12]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["/Users/pauldorsch/Documents/PaulsCode/Motivation App/motivation-app/frontend/src/actions/quote.js"],"names":["actionTypes","loadQuoteSuccess","quote","type","LOAD_QUOTE_SUCCESS","loadQuoteError","error","LOAD_QUOTE_ERROR","loadQuoteLoading","LOAD_QUOTE","module","exports","loadQuote","id","dispatch","url","settings","method","mode","headers","fetch","json","response","ok","message"],"mappings":";;AAAA,OAAO,KAAKA,WAAZ,MAA6B,gBAA7B;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,KAAK,EAAI;AACjC,SAAO;AACNC,IAAAA,IAAI,EAAEH,WAAW,CAACI,kBADZ;AAENF,IAAAA,KAAK,EAALA;AAFM,GAAP;AAIA,CALD;;AAOA,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,KAAK,EAAI;AAC/B,SAAO;AACNH,IAAAA,IAAI,EAAEH,WAAW,CAACO,gBADZ;AAEND,IAAAA,KAAK,EAALA;AAFM,GAAP;AAIA,CALD;;AAOA,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC9B,SAAO;AACNL,IAAAA,IAAI,EAAEH,WAAW,CAACS;AADZ,GAAP;AAGA,CAJD;;AAMAC,MAAM,CAACC,OAAP,CAAeC,SAAf,GAA2B,UAAAC,EAAE,EAAI;AAChC;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACNA,gBAAAA,QAAQ,CAACN,gBAAgB,EAAjB,CAAR;AACIO,gBAAAA,GAFE,wBAEkBF,EAFlB;AAGFG,gBAAAA,QAHE,GAGS;AACdC,kBAAAA,MAAM,EAAE,KADM;AAEdC,kBAAAA,IAAI,EAAE,MAFQ;AAGdC,kBAAAA,OAAO,EAAE;AACP,oCAAgB;AADT;AAHK,iBAHT;AAAA;AAAA;AAAA,uBAWgBC,KAAK,CAACL,GAAD,EAAMC,QAAN,CAAL,CAAqBK,IAArB,EAXhB;;AAAA;AAWDC,gBAAAA,QAXC;;AAAA,oBAaDA,QAAQ,CAACC,EAbR;AAAA;AAAA;AAAA;;AAAA,iDAcIT,QAAQ,CAACT,cAAc,CAACiB,QAAQ,CAACE,OAAV,CAAf,CAdZ;;AAAA;AAAA,iDAiBEV,QAAQ,CAACb,gBAAgB,CAACqB,QAAQ,CAACpB,KAAV,CAAjB,CAjBV;;AAAA;AAAA;AAAA;AAAA,iDAmBEY,QAAQ,CAACT,cAAc,aAAf,CAnBV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBA,CAxBD","sourcesContent":["import * as actionTypes from '../actionTypes';\n\nconst loadQuoteSuccess = quote => {\n\treturn {\n\t\ttype: actionTypes.LOAD_QUOTE_SUCCESS,\n\t\tquote,\n\t};\n};\n\nconst loadQuoteError = error => {\n\treturn {\n\t\ttype: actionTypes.LOAD_QUOTE_ERROR,\n\t\terror,\n\t};\n};\n\nconst loadQuoteLoading = () => {\n\treturn {\n\t\ttype: actionTypes.LOAD_QUOTE,\n\t};\n};\n\nmodule.exports.loadQuote = id => {\n\treturn async (dispatch) => {\n\t\tdispatch(loadQuoteLoading());\n\t\tlet url = `/api/quote/${id}`;\n\t\tlet settings = {\n\t\t\tmethod: 'GET',\n\t\t\tmode: 'cors',\n\t\t\theaders: {\n\t\t\t  'Content-Type': 'application/json',\n\t\t\t},\n\t\t  };\n\t\t  try {\n\t\t\tlet response = await fetch(url, settings).json();\n\t\t\n\t\t\tif(!response.ok) {\n\t\t\t  return dispatch(loadQuoteError(response.message));\n\t\t\t}\n\t\t\n\t\t\treturn dispatch(loadQuoteSuccess(response.quote));\n\t\t  } catch (err) {\n\t\t\treturn dispatch(loadQuoteError(err));\n\t\t  }\t\n\n\t}\n}"]},"metadata":{},"sourceType":"module"}