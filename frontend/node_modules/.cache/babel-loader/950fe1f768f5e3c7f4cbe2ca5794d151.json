{"ast":null,"code":"import _classCallCheck from \"/Users/pauldorsch/Documents/PaulsCode/Motivation App/motivation-app/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pauldorsch/Documents/PaulsCode/Motivation App/motivation-app/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/pauldorsch/Documents/PaulsCode/Motivation App/motivation-app/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/pauldorsch/Documents/PaulsCode/Motivation App/motivation-app/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/pauldorsch/Documents/PaulsCode/Motivation App/motivation-app/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/pauldorsch/Documents/PaulsCode/Motivation App/motivation-app/frontend/src/App.js\";\n// /client/App.js\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      data: [],\n      id: 0,\n      message: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null\n    };\n\n    _this.getDataFromDb = function () {\n      fetch(\"http://localhost:3001/api/getData\").then(function (data) {\n        return data.json();\n      }).then(function (res) {\n        return _this.setState({\n          data: res.data\n        });\n      });\n    };\n\n    _this.putDataToDB = function (message) {\n      var currentIds = _this.state.data.map(function (data) {\n        return data.id;\n      });\n\n      var idToBeAdded = 0;\n\n      while (currentIds.includes(idToBeAdded)) {\n        ++idToBeAdded;\n      }\n\n      axios.post(\"http://localhost:3001/api/putData\", {\n        id: idToBeAdded,\n        message: message\n      });\n    };\n\n    _this.deleteFromDB = function (idTodelete) {\n      var objIdToDelete = null;\n\n      _this.state.data.forEach(function (dat) {\n        if (dat.id === idTodelete) {\n          objIdToDelete = dat._id;\n        }\n      });\n\n      axios.delete(\"http://localhost:3001/api/deleteData\", {\n        data: {\n          id: objIdToDelete\n        }\n      });\n    };\n\n    _this.updateDB = function (idToUpdate, updateToApply) {\n      var objIdToUpdate = null;\n\n      _this.state.data.forEach(function (dat) {\n        if (dat.id === idToUpdate) {\n          objIdToUpdate = dat._id;\n        }\n      });\n\n      axios.post(\"http://localhost:3001/api/updateData\", {\n        id: objIdToUpdate,\n        update: {\n          message: updateToApply\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    // when component mounts, first thing it does is fetch all existing data in our db\n    // then we incorporate a polling logic so that we can easily see if our db has \n    // changed and implement those changes into our UI\n    value: function componentDidMount() {\n      this.getDataFromDb();\n\n      if (!this.state.intervalIsSet) {\n        var interval = setInterval(this.getDataFromDb, 1000);\n        this.setState({\n          intervalIsSet: interval\n        });\n      }\n    } // never let a process live forever \n    // always kill a process everytime we are done using it\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.state.intervalIsSet) {\n        clearInterval(this.state.intervalIsSet);\n        this.setState({\n          intervalIsSet: null\n        });\n      }\n    } // just a note, here, in the front end, we use the id key of our data object \n    // in order to identify which we want to Update or delete.\n    // for our back end, we use the object id assigned by MongoDB to modify \n    // data base entries\n    // our first get method that uses our backend api to \n    // fetch data from our data base\n\n  }, {\n    key: \"render\",\n    // here is our UI\n    // it is easy to understand their functions when you \n    // see them render into our screen\n    value: function render() {\n      var _this2 = this;\n\n      var data = this.state.data;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, data.length <= 0 ? \"NO DB ENTRIES YET\" : data.map(function (dat) {\n        return React.createElement(\"li\", {\n          style: {\n            padding: \"10px\"\n          },\n          key: data.message,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          style: {\n            color: \"gray\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, \" id: \"), \" \", dat.id, \" \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          style: {\n            color: \"gray\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, \" data: \"), dat.message);\n      })), React.createElement(\"div\", {\n        style: {\n          padding: \"10px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        onChange: function onChange(e) {\n          return _this2.setState({\n            message: e.target.value\n          });\n        },\n        placeholder: \"add something in the database\",\n        style: {\n          width: \"200px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.putDataToDB(_this2.state.message);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"ADD 2\")), React.createElement(\"div\", {\n        style: {\n          padding: \"10px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        style: {\n          width: \"200px\"\n        },\n        onChange: function onChange(e) {\n          return _this2.setState({\n            idToDelete: e.target.value\n          });\n        },\n        placeholder: \"put id of item to delete here\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.deleteFromDB(_this2.state.idToDelete);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \"DELETE\")), React.createElement(\"div\", {\n        style: {\n          padding: \"10px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        style: {\n          width: \"200px\"\n        },\n        onChange: function onChange(e) {\n          return _this2.setState({\n            idToUpdate: e.target.value\n          });\n        },\n        placeholder: \"id of item to update here\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        style: {\n          width: \"200px\"\n        },\n        onChange: function onChange(e) {\n          return _this2.setState({\n            updateToApply: e.target.value\n          });\n        },\n        placeholder: \"put new value of the item here\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.updateDB(_this2.state.idToUpdate, _this2.state.updateToApply);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, \"UPDATE\")));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/pauldorsch/Documents/PaulsCode/Motivation App/motivation-app/frontend/src/App.js"],"names":["React","Component","axios","App","state","data","id","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","getDataFromDb","fetch","then","json","res","setState","putDataToDB","currentIds","map","idToBeAdded","includes","post","deleteFromDB","idTodelete","objIdToDelete","forEach","dat","_id","delete","updateDB","updateToApply","objIdToUpdate","update","interval","setInterval","clearInterval","length","padding","color","e","target","value","width"],"mappings":"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","sourcesContent":["// /client/App.js\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\n\nclass App extends Component {\n  // initialize our state \n  state = {\n    data: [],\n    id: 0,\n    message: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null\n  };\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has \n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  // never let a process live forever \n  // always kill a process everytime we are done using it\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  // just a note, here, in the front end, we use the id key of our data object \n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify \n  // data base entries\n\n  // our first get method that uses our backend api to \n  // fetch data from our data base\n  getDataFromDb = () => {\n    fetch(\"http://localhost:3001/api/getData\")\n      .then(data => data.json())\n      .then(res => this.setState({ data: res.data }));\n  };\n\n  // our put method that uses our backend api\n  // to create new query into our data base\n  putDataToDB = message => {\n    let currentIds = this.state.data.map(data => data.id);\n    let idToBeAdded = 0;\n    while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n\n    axios.post(\"http://localhost:3001/api/putData\", {\n      id: idToBeAdded,\n      message: message\n    });\n  };\n\n\n  // our delete method that uses our backend api \n  // to remove existing database information\n  deleteFromDB = idTodelete => {\n    let objIdToDelete = null;\n    this.state.data.forEach(dat => {\n      if (dat.id === idTodelete) {\n        objIdToDelete = dat._id;\n      }\n    });\n\n    axios.delete(\"http://localhost:3001/api/deleteData\", {\n      data: {\n        id: objIdToDelete\n      }\n    });\n  };\n\n\n  // our update method that uses our backend api\n  // to overwrite existing data base information\n  updateDB = (idToUpdate, updateToApply) => {\n    let objIdToUpdate = null;\n    this.state.data.forEach(dat => {\n      if (dat.id === idToUpdate) {\n        objIdToUpdate = dat._id;\n      }\n    });\n\n    axios.post(\"http://localhost:3001/api/updateData\", {\n      id: objIdToUpdate,\n      update: { message: updateToApply }\n    });\n  };\n\n\n  // here is our UI\n  // it is easy to understand their functions when you \n  // see them render into our screen\n  render() {\n    const { data } = this.state;\n    return (\n      <div>\n        <ul>\n          {data.length <= 0\n            ? \"NO DB ENTRIES YET\"\n            : data.map(dat => (\n                <li style={{ padding: \"10px\" }} key={data.message}>\n                  <span style={{ color: \"gray\" }}> id: </span> {dat.id} <br />\n                  <span style={{ color: \"gray\" }}> data: </span>\n                  {dat.message}\n                </li>\n              ))}\n        </ul>\n        <div style={{ padding: \"10px\" }}>\n          <input\n            type=\"text\"\n            onChange={e => this.setState({ message: e.target.value })}\n            placeholder=\"add something in the database\"\n            style={{ width: \"200px\" }}\n          />\n          <button onClick={() => this.putDataToDB(this.state.message)}>\n            ADD 2\n          </button>\n        </div>\n        <div style={{ padding: \"10px\" }}>\n          <input\n            type=\"text\"\n            style={{ width: \"200px\" }}\n            onChange={e => this.setState({ idToDelete: e.target.value })}\n            placeholder=\"put id of item to delete here\"\n          />\n          <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n            DELETE\n          </button>\n        </div>\n        <div style={{ padding: \"10px\" }}>\n          <input\n            type=\"text\"\n            style={{ width: \"200px\" }}\n            onChange={e => this.setState({ idToUpdate: e.target.value })}\n            placeholder=\"id of item to update here\"\n          />\n          <input\n            type=\"text\"\n            style={{ width: \"200px\" }}\n            onChange={e => this.setState({ updateToApply: e.target.value })}\n            placeholder=\"put new value of the item here\"\n          />\n          <button\n            onClick={() =>\n              this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n            }\n          >\n            UPDATE\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}