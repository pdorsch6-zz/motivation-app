{"map":"{\"version\":3,\"sources\":[\"/Users/pauldorsch/Documents/PaulsCode/Motivation App/motivation-app/frontend/src/App.js\",\"/Users/pauldorsch/Documents/PaulsCode/Motivation App/motivation-app/frontend/src/serviceWorker.js\",\"/Users/pauldorsch/Documents/PaulsCode/Motivation App/motivation-app/frontend/src/index.js\"],\"names\":[\"App\",\"state\",\"data\",\"id\",\"message\",\"intervalIsSet\",\"idToDelete\",\"idToUpdate\",\"objectToUpdate\",\"getDataFromDb\",\"fetch\",\"then\",\"json\",\"res\",\"_this\",\"setState\",\"putDataToDB\",\"currentIds\",\"map\",\"idToBeAdded\",\"includes\",\"axios\",\"post\",\"deleteFromDB\",\"idTodelete\",\"objIdToDelete\",\"forEach\",\"dat\",\"_id\",\"delete\",\"updateDB\",\"updateToApply\",\"objIdToUpdate\",\"update\",\"this\",\"interval\",\"setInterval\",\"clearInterval\",\"_this2\",\"react_default\",\"a\",\"createElement\",\"length\",\"style\",\"padding\",\"key\",\"color\",\"type\",\"onChange\",\"e\",\"target\",\"value\",\"placeholder\",\"width\",\"onClick\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\"],\"mappings\":\"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\",\"sourcesContent\":[\"// /client/App.js\\nimport React, { Component } from \\\"react\\\";\\nimport axios from \\\"axios\\\";\\n\\nclass App extends Component {\\n  // initialize our state \\n  state = {\\n    data: [],\\n    id: 0,\\n    message: null,\\n    intervalIsSet: false,\\n    idToDelete: null,\\n    idToUpdate: null,\\n    objectToUpdate: null\\n  };\\n\\n  // when component mounts, first thing it does is fetch all existing data in our db\\n  // then we incorporate a polling logic so that we can easily see if our db has \\n  // changed and implement those changes into our UI\\n  componentDidMount() {\\n    this.getDataFromDb();\\n    if (!this.state.intervalIsSet) {\\n      let interval = setInterval(this.getDataFromDb, 1000);\\n      this.setState({ intervalIsSet: interval });\\n    }\\n  }\\n\\n  // never let a process live forever \\n  // always kill a process everytime we are done using it\\n  componentWillUnmount() {\\n    if (this.state.intervalIsSet) {\\n      clearInterval(this.state.intervalIsSet);\\n      this.setState({ intervalIsSet: null });\\n    }\\n  }\\n\\n  // just a note, here, in the front end, we use the id key of our data object \\n  // in order to identify which we want to Update or delete.\\n  // for our back end, we use the object id assigned by MongoDB to modify \\n  // data base entries\\n\\n  // our first get method that uses our backend api to \\n  // fetch data from our data base\\n  getDataFromDb = () => {\\n    fetch(\\\"http://localhost:3001/api/getData\\\")\\n      .then(data => data.json())\\n      .then(res => this.setState({ data: res.data }));\\n  };\\n\\n  // our put method that uses our backend api\\n  // to create new query into our data base\\n  putDataToDB = message => {\\n    let currentIds = this.state.data.map(data => data.id);\\n    let idToBeAdded = 0;\\n    while (currentIds.includes(idToBeAdded)) {\\n      ++idToBeAdded;\\n    }\\n\\n    axios.post(\\\"http://localhost:3001/api/putData\\\", {\\n      id: idToBeAdded,\\n      message: message\\n    });\\n  };\\n\\n\\n  // our delete method that uses our backend api \\n  // to remove existing database information\\n  deleteFromDB = idTodelete => {\\n    let objIdToDelete = null;\\n    this.state.data.forEach(dat => {\\n      if (dat.id === idTodelete) {\\n        objIdToDelete = dat._id;\\n      }\\n    });\\n\\n    axios.delete(\\\"http://localhost:3001/api/deleteData\\\", {\\n      data: {\\n        id: objIdToDelete\\n      }\\n    });\\n  };\\n\\n\\n  // our update method that uses our backend api\\n  // to overwrite existing data base information\\n  updateDB = (idToUpdate, updateToApply) => {\\n    let objIdToUpdate = null;\\n    this.state.data.forEach(dat => {\\n      if (dat.id === idToUpdate) {\\n        objIdToUpdate = dat._id;\\n      }\\n    });\\n\\n    axios.post(\\\"http://localhost:3001/api/updateData\\\", {\\n      id: objIdToUpdate,\\n      update: { message: updateToApply }\\n    });\\n  };\\n\\n\\n  // here is our UI\\n  // it is easy to understand their functions when you \\n  // see them render into our screen\\n  render() {\\n    const { data } = this.state;\\n    return (\\n      <div>\\n        <ul>\\n          {data.length <= 0\\n            ? \\\"NO DB ENTRIES YET\\\"\\n            : data.map(dat => (\\n                <li style={{ padding: \\\"10px\\\" }} key={data.message}>\\n                  <span style={{ color: \\\"gray\\\" }}> id: </span> {dat.id} <br />\\n                  <span style={{ color: \\\"gray\\\" }}> data: </span>\\n                  {dat.message}\\n                </li>\\n              ))}\\n        </ul>\\n        <div style={{ padding: \\\"10px\\\" }}>\\n          <input\\n            type=\\\"text\\\"\\n            onChange={e => this.setState({ message: e.target.value })}\\n            placeholder=\\\"add something in the database\\\"\\n            style={{ width: \\\"200px\\\" }}\\n          />\\n          <button onClick={() => this.putDataToDB(this.state.message)}>\\n            ADD\\n          </button>\\n        </div>\\n        <div style={{ padding: \\\"10px\\\" }}>\\n          <input\\n            type=\\\"text\\\"\\n            style={{ width: \\\"200px\\\" }}\\n            onChange={e => this.setState({ idToDelete: e.target.value })}\\n            placeholder=\\\"put id of item to delete here\\\"\\n          />\\n          <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\\n            DELETE\\n          </button>\\n        </div>\\n        <div style={{ padding: \\\"10px\\\" }}>\\n          <input\\n            type=\\\"text\\\"\\n            style={{ width: \\\"200px\\\" }}\\n            onChange={e => this.setState({ idToUpdate: e.target.value })}\\n            placeholder=\\\"id of item to update here\\\"\\n          />\\n          <input\\n            type=\\\"text\\\"\\n            style={{ width: \\\"200px\\\" }}\\n            onChange={e => this.setState({ updateToApply: e.target.value })}\\n            placeholder=\\\"put new value of the item here\\\"\\n          />\\n          <button\\n            onClick={() =>\\n              this.updateDB(this.state.idToUpdate, this.state.updateToApply)\\n            }\\n          >\\n            UPDATE\\n          </button>\\n        </div>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{16:function(t,e,a){t.exports=a(41)},41:function(t,e,a){\"use strict\";a.r(e);var n=a(0),o=a.n(n),l=a(10),i=a.n(l),r=a(11),s=a(12),u=a(14),c=a(13),d=a(15),p=a(2),h=a.n(p),m=function(t){function e(){var t,a;Object(r.a)(this,e);for(var n=arguments.length,o=new Array(n),l=0;l<n;l++)o[l]=arguments[l];return(a=Object(u.a)(this,(t=Object(c.a)(e)).call.apply(t,[this].concat(o)))).state={data:[],id:0,message:null,intervalIsSet:!1,idToDelete:null,idToUpdate:null,objectToUpdate:null},a.getDataFromDb=function(){fetch(\"http://localhost:3001/api/getData\").then(function(t){return t.json()}).then(function(t){return a.setState({data:t.data})})},a.putDataToDB=function(t){for(var e=a.state.data.map(function(t){return t.id}),n=0;e.includes(n);)++n;h.a.post(\"http://localhost:3001/api/putData\",{id:n,message:t})},a.deleteFromDB=function(t){var e=null;a.state.data.forEach(function(a){a.id===t&&(e=a._id)}),h.a.delete(\"http://localhost:3001/api/deleteData\",{data:{id:e}})},a.updateDB=function(t,e){var n=null;a.state.data.forEach(function(e){e.id===t&&(n=e._id)}),h.a.post(\"http://localhost:3001/api/updateData\",{id:n,update:{message:e}})},a}return Object(d.a)(e,t),Object(s.a)(e,[{key:\"componentDidMount\",value:function(){if(this.getDataFromDb(),!this.state.intervalIsSet){var t=setInterval(this.getDataFromDb,1e3);this.setState({intervalIsSet:t})}}},{key:\"componentWillUnmount\",value:function(){this.state.intervalIsSet&&(clearInterval(this.state.intervalIsSet),this.setState({intervalIsSet:null}))}},{key:\"render\",value:function(){var t=this,e=this.state.data;return o.a.createElement(\"div\",null,o.a.createElement(\"ul\",null,e.length<=0?\"NO DB ENTRIES YET\":e.map(function(t){return o.a.createElement(\"li\",{style:{padding:\"10px\"},key:e.message},o.a.createElement(\"span\",{style:{color:\"gray\"}},\" id: \"),\" \",t.id,\" \",o.a.createElement(\"br\",null),o.a.createElement(\"span\",{style:{color:\"gray\"}},\" data: \"),t.message)})),o.a.createElement(\"div\",{style:{padding:\"10px\"}},o.a.createElement(\"input\",{type:\"text\",onChange:function(e){return t.setState({message:e.target.value})},placeholder:\"add something in the database\",style:{width:\"200px\"}}),o.a.createElement(\"button\",{onClick:function(){return t.putDataToDB(t.state.message)}},\"ADD\")),o.a.createElement(\"div\",{style:{padding:\"10px\"}},o.a.createElement(\"input\",{type:\"text\",style:{width:\"200px\"},onChange:function(e){return t.setState({idToDelete:e.target.value})},placeholder:\"put id of item to delete here\"}),o.a.createElement(\"button\",{onClick:function(){return t.deleteFromDB(t.state.idToDelete)}},\"DELETE\")),o.a.createElement(\"div\",{style:{padding:\"10px\"}},o.a.createElement(\"input\",{type:\"text\",style:{width:\"200px\"},onChange:function(e){return t.setState({idToUpdate:e.target.value})},placeholder:\"id of item to update here\"}),o.a.createElement(\"input\",{type:\"text\",style:{width:\"200px\"},onChange:function(e){return t.setState({updateToApply:e.target.value})},placeholder:\"put new value of the item here\"}),o.a.createElement(\"button\",{onClick:function(){return t.updateDB(t.state.idToUpdate,t.state.updateToApply)}},\"UPDATE\")))}}]),e}(n.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));i.a.render(o.a.createElement(m,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(t){t.unregister()})}},[[16,1,2]]]);","extractedComments":[]}